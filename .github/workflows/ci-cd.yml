name: CI setup for Nodejs API app

on:
  workflow_dispatch:



jobs:
  unit_testing:
    runs-on: [ubuntu-latest]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.2

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.2.0
        with:
            node-version: 22.16.0

      # Find npm cache directory
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      # Cache dependencies
      - name: Cache dependencies 
        uses: actions/cache@v4
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
                    ${{ runner.os }}-node-

      # Install Dependencies
      - name: Install nodejs dependencies
        run: |
           npm  ci

     # Test the code
      - name: test the code
        run: |
           npm test

  
  lint_and_code_coverage:
    runs-on: [ubuntu-latest]
    needs: unit_testing
    

    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:

      # Checkout Code repository
      - name: Checkout Repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      # Setup nodejs environement
      - name: Setup Node.js environment
        uses: actions/setup-node@v4.2.0
        with:
            node-version: 22.16.0

      # Find npm cache directory
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      # Cache dependencies
      - name: Cache dependencies 
        uses: actions/cache@v4
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
                    ${{ runner.os }}-node-


      - name: Install dependencies
        run: |
           npm ci

      

      - name: Run linting
        run: |
          npm run lint 

      - name: Code Coverage by SonarQube
        run: |
          npm install -g @sonar/scan
          sonar-scanner -Dsonar.organization=apurva14a -Dsonar.projectKey=Apurva14A_deploy-api-nginx-prod  -Dsonar.sources=src -Dsonar.token=${{ env.SONAR_TOKEN }} 


  build:
    runs-on: [ubuntu-latest]
    needs: [unit_testing, lint_and_code_coverage]


    steps:

      # Chekcout code repository

      - name: Checkout Repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

       # Setup nodejs environement
      - name: Setup Node.js environment
        uses: actions/setup-node@v4.2.0
        with:
            node-version: 22.16.0

      # Find npm cache directory
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      # Cache dependencies
      - name: Cache dependencies 
        uses: actions/cache@v4
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
                    ${{ runner.os }}-node-
      

      - name: Install dependencies
        run: |
           npm ci

      
      # - name: Build the code and generate the artifacts
      #   run: |
      #      npm build


  docker_build_and_push:
    runs-on: [ubuntu-latest]
    needs: [unit_testing, lint_and_code_coverage, build]


    env:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
      REGISTRY: docker.io




    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Extract Docker image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_HUB_USERNAME }}/node-api

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_TOKEN }}
        

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          annotations: ${{ steps.meta.outputs.annotations }}
          load: true
      
      - name: Run Trivy vulnerability scanner
        id: image_scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/node-api:main
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          output: trivy-report.json

      
      - name: Upload Vulnerability Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json
          retention-days: 30
        
      - name: Download Vulnerability Scan Results
        uses: actions/download-artifact@v4
        with:
          name: trivy-report
          path: /home/runner/work/deploy-api-nginx-prod/deploy-api-nginx-prod/trivy-report.json
      

      - name: Send report to slack
        if: ${{ steps.image_scan.conclusion == 'success' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          # Prepare Short Summary
          SUMMARY=$(jq -r '.Results[] | "\(.Target): \(.Vulnerabilities | length) vulns"' /home/runner/work/deploy-api-nginx-prod/deploy-api-nginx-prod/trivy-report.json)

          # Send Slack
          curl -X POST -H 'Content-type: application/json' \
          --data "{
          \"text\": \"*Trivy Scan Report for your-image:latest*\n\`\`\`${SUMMARY}\`\`\`\",
            \"attachments\": [
              {
                \"fallback\": \"Full report attached.\",
                \"text\": \"[Trivy full JSON report attached as code block below] \",
                \"fields\": [],
                \"footer\": \"GitHub Actions\"
              }
            ]
          }" \
          ${{ env.SLACK_WEBHOOK_URL }}

          
          
      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


      

      